// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  Int @id @default(autoincrement())
  email String   @unique
  password String
  firstName String?
  lastName  String?
  dateOfBirth DateTime?
  address String?
  phone String?
  isAdmin Boolean @default(false)
  createdAt DateTime @default(now())

  // relations
  bookings    Booking[]
}

model Booking {
  id Int @id @default(autoincrement())

  // relation
  user User @relation(fields: [userId], references: [id])
  userId Int

  room Room @relation(fields: [roomId], references: [id])
  roomId Int

  payments Payment[]
}

model RoomType {
  id Int @id @default(autoincrement())
  roomNumber  String
  description String
  pricePerNight Float
  capacity Int
}

model Room {
  id Int @id @default(autoincrement())
  status String @default("ready")
  
  // relation
  hotel Hotel @relation(fields: [hotelId], references: [id])
  hotelId Int

  bookings Booking[]
}

model Hotel {
  id Int @id @default(autoincrement())
  name  String @unique
  email String @unique
  image String?
  address String
  phone String
  stars Int
  checkInTime DateTime
  checkOutTime DateTime

  // relation
  rooms Room[]
}

model Payment {
  id  Int @id @default(autoincrement())
  date  DateTime
  amount  Float
  payMethod String
  isPaid Boolean @default(false)

  // relation
  booking Booking @relation(fields: [bookingId], references: [id])
  bookingId Int
}